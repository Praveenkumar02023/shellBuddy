import * as readline from "readline";
import { exec } from "child_process";
import * as os from "os";
import { editCommandInEditor } from "./editor.js";

/**
 * Handles the interactive prompt for a generated command.
 *
 * @param command - The command generated by AI
 */
export async function handleCommandExecution(command: string): Promise<void> {
  console.log("Generated Command:");
  console.log(`\n$ ${command}\n`);

  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  const promptForAction = () => {
    rl.question(
      "Action? (y: execute / n: cancel / e: edit): ",
      async (answer) => {
        const action = answer.toLowerCase().trim();

        if (action === "y") {
          rl.close();
          console.log("\nExecuting command...");

          const shell = os.platform() === "win32" ? "powershell" : "/bin/bash";

          exec(command, { shell }, (error, stdout, stderr) => {
            if (error) {
              console.error(
                `Execution Error (${error.code}):\n${stderr?.trim()}`
              );
            } else if (stderr) {
              console.warn(`Command Warnings/Errors:\n${stderr.trim()}`);
              if (stdout) console.log(`Output:\n${stdout.trim()}`);
            } else {
              console.log("Command succeeded.");
              if (stdout) console.log(`Output:\n${stdout.trim()}`);
            }
          });
        } else if (action === "e") {
          rl.close();
          await editCommandInEditor(command);
        } else if (action === "n") {
          rl.close();
          console.log("Command cancelled by user.");
        } else {
          console.log("Invalid action. Please enter y, n, or e.");
          promptForAction(); // Recursive prompt
        }
      }
    );
  };

  promptForAction();
}
