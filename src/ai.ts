import { GoogleGenAI } from "@google/genai";
import * as os from "os";
import { ensureApiKey } from "./config.js";

export interface SystemConfig {
  shell: string;
  systemInstruction: string;
}

export function getSystemConfig(): SystemConfig {
  const platform = os.platform();
  let shellName: string;
  let specificRules: string;

  if (platform === "win32") {
    shellName = "Windows PowerShell";
    specificRules = `Prefer standard, widely available Windows PowerShell cmdlets (e.g., 'Get-ChildItem', 'Select-Object', 'Remove-Item', 'Where-Object', 'Move-Item').
For destructive operations, generate a non-destructive alternative (e.g., using the '-WhatIf' parameter).`;
  } else {
    shellName = "Bash/Zsh";
    specificRules = `Prefer standard, widely available Linux/macOS utilities (e.g., 'grep', 'find', 'ls', 'rm', 'mv').
For destructive operations, generate a non-destructive alternative (e.g., 'find ... -print').`;
  }

  const systemInstruction = `You are an expert ${shellName} command generator.
A user will provide a request in natural language. Your ONLY task is to convert this request 
into a single, executable, syntactically correct ${shellName} command.

Crucial Rules:
1. Output MUST be ONLY the shell command. Do not include any explanations, surrounding text, 
   markdown formatting.
2. The output must be ready to be copied and pasted directly into a terminal.
3. ${specificRules}
`;

  return { shell: shellName, systemInstruction };
}

export async function generateCommand(
  userPrompt: string
): Promise<string | null> {
  const startTime = Date.now();
  const timeout = 10000; // 10 seconds total
  const retryDelay = 1500; // 1.5 seconds between retries
  let attempt = 0;

  const config = getSystemConfig();
  let apiKey: string;

  try {
    apiKey = await ensureApiKey();
  } catch (err) {
    console.error("Failed to get API key:", err);
    return null;
  }

  const ai = new GoogleGenAI({ apiKey });
  const model = "gemini-2.5-flash";

  console.log(`Starting command generation for input: "${userPrompt}"`);
  console.log(`Using shell: ${config.shell}`);

  while (Date.now() - startTime < timeout) {
    attempt++;
    try {
      console.log(`Attempt ${attempt}: Calling Gemini API...`);
      const response = await ai.models.generateContent({
        model,
        contents: [{ role: "user", parts: [{ text: userPrompt }] }],
        config: {
          systemInstruction: { parts: [{ text: config.systemInstruction }] },
        },
      });

      if (response.text?.trim()) {
        console.log("Command successfully generated by Gemini API.");
        console.log("Generated command:", response.text.trim());
        return response.text.trim();
      } else {
        console.warn(`API responded but no command text found. Retrying...`);
      }
    } catch (err) {
      console.warn(`Attempt ${attempt} failed with error:`, err);
    }

    // Wait before retrying
    await new Promise((resolve) => setTimeout(resolve, retryDelay));
  }

  console.error(
    `Failed to generate command within 10 seconds after ${attempt} attempts.`
  );
  return null;
}
